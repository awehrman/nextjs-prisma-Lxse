import { ParserRuleDefinition, ParserRuleWithRelations } from '@prisma/client';
import _ from 'lodash';
import React, { useCallback, useEffect, useState } from 'react';
import useResizeObserver from "use-resize-observer";
import { FormProvider, useForm } from 'react-hook-form';
import styled from 'styled-components';


import {
  getDefaultRuleValuesForIndex,
  RuleProvider,
  useRuleContext
} from 'contexts/rule-context';
import { useParserContext } from 'contexts/parser-context';
import { Button } from 'components/common';
import { removeTypename } from 'hooks/helpers/parser-rule';
import useParserRule from 'hooks/use-parser-rule';
import useParserRules from 'hooks/use-parser-rules';
import EditIcon from 'public/icons/edit.svg';

import RuleBody from './body';
import RuleHeader from './header';
import { RuleComponentProps, RuleContentProps } from '../types';
import { hasRuleWarning } from '../utils';

const RuleContent: React.FC<RuleContentProps> = ({ rule }) => {
  const [isInit, setIsInit] = useState(false);
  const { rules = [] } = useParserRules();
  const {
    dispatch,
    state: { defaultValues, displayContext, isExpanded }
  } = useRuleContext();
  const {
    state: { isCollapsed },
    dispatch: parserDispatch
  } = useParserContext();
  const methods = useForm<ParserRuleWithRelations>({
    defaultValues,
    mode: 'onBlur'
  });
  const definedRuleNames = rules.map(
    (rule: ParserRuleWithRelations) => rule.name
  );
  const ruleDefinitionNames = useCallback(
    () => [
      ...new Set(
        (rule?.definitions ?? [])
          .map((def: ParserRuleDefinition) => `${def.rule}`)
          .filter((def: string) => !!def.length)
      )
    ],
    [rule?.definitions]
  );
  const { handleSubmit, reset, setFocus } = methods;
  const { addRule, updateRule } = useParserRule(rule?.id ?? '-1');
  const saveLabel = displayContext === 'add' ? 'Add Rule' : 'Save Rule';

  function handleCancelClick(event: React.MouseEvent<HTMLButtonElement>) {
    event.preventDefault();
    // TODO should any of these useParserRule calls actually be dispatched from the ruleContext?
    // whats the performance difference?
    parserDispatch({ type: 'SET_IS_ADD_BUTTON_DISPLAYED', payload: true });
    dispatch({ type: 'SET_DISPLAY_CONTEXT', payload: 'display' });
    reset({ ...defaultValues });
  }

  function handleFormSubmit(data: ParserRuleWithRelations) {
    // TODO we'll probably pass this explicitly in, but for now just throw it at the bottom
    if (data.order === 'undefined' || data.order === null) {
      data.order = rules?.length ?? 0;
    }
    if (data?.listItemEntryValue) {
      delete data.listItemEntryValue;
    }
    const input = removeTypename(data);
    if (displayContext === 'edit') {
      reset({ ...input });
      updateRule(input);
      dispatch({ type: 'UPDATE_FORM_STATE', payload: data });
    } else if (displayContext === 'add') {
      addRule(input);
      dispatch({
        type: 'RESET_DEFAULT_VALUES',
        payload: getDefaultRuleValuesForIndex(0)
      });
    }
    // TODO on success only? where to handle validation?
    // seems like these should happen on update
    parserDispatch({ type: 'SET_IS_ADD_BUTTON_DISPLAYED', payload: true });
    dispatch({ type: 'SET_DISPLAY_CONTEXT', payload: 'display' });
  }

  useEffect(() => {
    dispatch({ type: 'SET_IS_EXPANDED', payload: !isCollapsed });
  }, [dispatch, isCollapsed]);

  useEffect(() => {
    if (displayContext === 'add' && !isInit) {
      setFocus('name');
      setIsInit(true);
    }
  }, [displayContext, isInit, setFocus]);

  useEffect(() => {
    let triggedWarning = false;
    for (const rule of ruleDefinitionNames()) {
      const containsWarnings = hasRuleWarning(`${rule}`, definedRuleNames);
      if (containsWarnings) {
        triggedWarning = true;
        break;
      }
    }
    dispatch({ type: 'SET_HAS_WARNING', payload: triggedWarning });
  }, [ruleDefinitionNames, definedRuleNames, dispatch]);

  return (
    <Wrapper
      className={displayContext}
      onSubmit={handleSubmit(handleFormSubmit)}
    >
      <FormProvider {...methods}>
        <RuleHeader />
        {isExpanded || displayContext !== 'display' ? <RuleBody /> : null}
        {displayContext !== 'display' ? (
          <Buttons>
            <CancelButton
              type="button"
              label="Cancel"
              onClick={(e) => handleCancelClick(e)}
            />
            <SaveButton type="submit" label={saveLabel} />
          </Buttons>
        ) : null}
      </FormProvider>
    </Wrapper>
  );
};

// TODO this may not be needed anymore
const Rule: React.FC<RuleComponentProps> = ({
  index = 0,
  id,
  recomputeRuleSize
}) => {
  const { rule } = useParserRule(id);
  const { ref, height = 1 } = useResizeObserver<HTMLDivElement>();

  useEffect(() => {
    if (recomputeRuleSize !== undefined) {
      recomputeRuleSize(index, height)
    }
  }, [index, height]);
  
  return (
    // TODO this is really only to skip my forwardRef so this can be simplified
    <div ref={ref} >
      <RuleContent rule={rule} />
    </div>
  );
};

export default Rule;

// RuleContent.whyDidYouRender = true;

const Buttons = styled.div`
  margin: 10px 15px;
  align-self: flex-end;
`;

const CancelButton = styled(Button)`
  border: 0;
  background: #ccc;
  font-weight: 600;
  color: #fff;
  padding: 4px 6px;
  border-radius: 5px;
  margin-right: 10px;
`;

const SaveButton = styled(Button)`
  border: 0;
  background: ${({ theme }) => theme.colors.altGreen};
  font-weight: 600;
  color: #fff;
  padding: 4px 6px;
  border-radius: 5px;
`;

const Wrapper = styled.form`
  display: flex;
  flex-direction: column;
  width: 628px;
  position: relative;
  margin-left: -40px;
  padding-left: 40px;
  margin-bottom: 10px;
  /* keep some kind of background so we can maintain hover */
  background: white;

  &.edit {
    left: -40px;
    padding: 10px 0 10px 80px;
    width: 640px;
    background: ${({ theme }) => theme.colors.lightBlue};
    margin-bottom: 10px;
  }

  &.add {
    left: -40px;
    padding: 10px 0 10px 80px;
    width: 640px;
    background: ${({ theme }) => theme.colors.lightGreen};
    margin-bottom: 10px;
  }
`;

const EditContainer: React.FC = () => {
  const {
    dispatch,
    state: { displayContext, index }
  } = useRuleContext();

  const {
    state: { focusedRuleIndex }
  } = useParserContext();

  // TODO this shit should be in context
  const isFocusedRule = focusedRuleIndex !== null && index === focusedRuleIndex;
  const showEditButton = displayContext === 'display' && isFocusedRule;

  function handleEditClick() {
    dispatch({ type: 'SET_DISPLAY_CONTEXT', payload: 'edit' });
  }

  return (
    <EditWrapper>
      <EditRuleButton visible={showEditButton} icon={<EditIcon />} onClick={handleEditClick} />
    </EditWrapper>
  )
};

// TODO Add will need to call this instead over Rule; or rather an alt version
export const Row: React.FC = ({ displayContext = 'display', id, index, recomputeRuleSize, rule, style }: any) => {
  const rowRef = React.useRef<HTMLDivElement>(null);

  const {
    state: { isCollapsed }
  } = useParserContext();

  return (
    <StyledRule ref={rowRef} style={style}>
      <RuleProvider
        rule={rule}
        id={id}
        index={index}
        initialContext={displayContext}
        isCollapsed={isCollapsed}
      >
        <FullRuleRow
          id={id}
          index={index}
          recomputeRuleSize={recomputeRuleSize}
        />
      </RuleProvider>
    </StyledRule>
  );
};

const FullRuleRow: React.FC<any> = ({ id, index, recomputeRuleSize }) => {
  const {
    dispatch,
    state: { displayContext, isFocused }
  } = useRuleContext();
  const {
    state: { focusedRuleIndex },
    dispatch: parserDispatch
  } = useParserContext();

  const isFocusedRule = focusedRuleIndex !== null && index === focusedRuleIndex;
  
  const debouncedHandleMouseEnter = _.debounce(() => {
    if (!isFocused && displayContext === 'display') {
      dispatch({ type: 'SET_IS_FOCUSED', payload: true });
      parserDispatch({ type: 'SET_FOCUSED_RULE_INDEX', payload: index });
    }
  }, 50);

  const debouncedHandleMouseLeave = _.debounce(() => {
    if (isFocused) {
      dispatch({ type: 'SET_IS_FOCUSED', payload: false });
      parserDispatch({ type: 'SET_FOCUSED_RULE_INDEX', payload: null });
    }
  }, 50);

  useEffect(() => {
    return () => {
      debouncedHandleMouseEnter.cancel();
      debouncedHandleMouseLeave.cancel();
    };
  }, [debouncedHandleMouseEnter, debouncedHandleMouseLeave]);

  
  return (
    <FullRuleRowWrapper
      onMouseEnter={debouncedHandleMouseEnter}
      onMouseLeave={debouncedHandleMouseLeave}
      focused={isFocusedRule}
    >
    {/* <Draggable draggableId={rules[index].id} index={index}>
      {(provided) => (
        <div
          ref={provided.innerRef}
          {...provided.dragHandleProps}
          {...provided.draggableProps}
        > */}
        <EditContainer />

        <RuleWrapper>
          {/* <Rule
            key={id}
            index={index}
            id={id}
            recomputeRuleSize={recomputeRuleSize}
          /> */}
        </RuleWrapper>
        {/* </div>
      )}
      </Draggable> */}
    </FullRuleRowWrapper> 
  );
};

const FullRuleRowWrapper = styled.div<any>`
  background: green;
  width: 100%;
  ${({ focused }) => focused && `
    border: 2px solid blue;
  `}
`;

type EditButtonProps = {
  visible: boolean;
}
const EditRuleButton = styled(Button)<EditButtonProps>`
  border: 0;
  background: transparent;
  cursor: none;
  color: ${({ theme }) => theme.colors.highlight};
  font-weight: 600;
  font-size: 13px;
  background: transparent;
  border: 2px solid transparent;
  display: flex;
  visibility: hidden;
  justify-content: flex-start;
  padding: 3px 5px 7px 7px;
  width: 28px;

  svg {
    height: 13px;
    width: 13px;
    top: 2px;
    position: relative;
    cursor: pointer;
    visibility: hidden;
  }

  ${({ visible }) => visible && `
    visibility: visible;
    cursor: none;

    svg {
      cursor: pointer;
      visibility: visible;
    }
  `}
`;

const StyledRule = styled.div`
  background: pink;
  display: flex;
  height: 100%;
`;

// TODO we actually want this entire region to display
const EditWrapper = styled.div`
  height: 100%;
  z-index: 100;
`;

const RuleWrapper = styled.div`
  background: orange;
  height: 100%;
  z-index: 90;
  width: 100%;
`;
