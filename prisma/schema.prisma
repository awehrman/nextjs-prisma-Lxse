// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(cuid())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  name             String?
  email            String?           @unique
  emailVerified    DateTime?         @map("email_verified")
  image            String?
  accounts         Account[]
  sessions         Session[]
  role             Role              @default(USER)
  importedRecipes  Recipe[]
  noteImportOffset Int?              @map(name: "note_import_offset")
  evernoteSession  EvernoteSession[]

  @@map("users")
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model EvernoteSession {
  id        String    @id @default(cuid())
  expires   DateTime?
  isExpired Boolean   @default(false)

  authURL       String?
  oauthVerifier String?
  error         String?

  loading Boolean @default(false)

  evernoteAuthToken String? @map(name: "evernote_auth_token")
  evernoteReqToken  String? @map(name: "evernote_req_token")
  evernoteReqSecret String? @map(name: "evernote_req_secret")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@map(name: "evernote_sessions")
}

model Ingredient {
  id                   String          @id @default(cuid())
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  name                 String          @unique
  plural               String?         @unique
  alternateNames       AlternateName[]
  properties           Properties[]
  isComposedIngredient Boolean         @default(false) @map(name: "is_composed_ingredient")
  isValidated          Boolean         @default(false) @map(name: "is_validated")

  parentId           String?
  parent             Ingredient?  @relation("relatedIngredients", fields: [parentId], references: [id])
  relatedIngredients Ingredient[] @relation("relatedIngredients")

  substitutes         Ingredient[] @relation("substitutes")
  substitutesRelation Ingredient[] @relation("substitutes")

  references     IngredientLine[]
  parsedSegments ParsedSegment[]

  @@map(name: "ingredients")
}

enum Properties {
  MEAT
  POULTRY
  FISH
  DAIRY
  SOY
  GLUTEN
}

model AlternateName {
  name         String     @unique
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId String

  @@map(name: "alternate_names")
}

model Recipe {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  importedUser   User     @relation(fields: [importedUserId], references: [id])
  importedUserId String   @map(name: "imported_user_id")

  evernoteGUID String   @map(name: "evernote_guid")
  title        String
  sources      String[]
  image        String

  // book   Book @relation(fields: [bookId], references: [id])
  // bookId Int  @map(name: "book_id")
  // author
  // authorId

  categories Category[]
  tags       Tag[]

  ingredientLine  IngredientLine[]
  instructionLine InstructionLine[]

  @@map(name: "recipes")
}

model Category {
  id           String  @id @default(cuid())
  name         String  @unique
  evernoteGUID String? @unique @map(name: "evernote_guid")

  recipes Recipe[]
  notes   Note[]

  @@map(name: "categories")
}

model Tag {
  id           String  @id @default(cuid())
  name         String  @unique
  evernoteGUID String? @unique @map(name: "evernote_guid")

  recipes Recipe[]
  notes   Note[]

  @@map(name: "tags")
}

model IngredientLine {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  blockIndex Int             @map(name: "block_index")
  lineIndex  Int             @map(name: "line_index")
  reference  String
  rule       String?
  isParsed   Boolean         @map(name: "is_parsed")
  parsed     ParsedSegment[]

  recipe   Recipe? @relation(fields: [recipeId], references: [id])
  recipeId String?

  Note   Note?   @relation(fields: [noteId], references: [id])
  noteId String?

  ingredient   Ingredient? @relation(fields: [ingredientId], references: [id])
  ingredientId String?

  @@map(name: "ingredient_lines")
}

model InstructionLine {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  blockIndex Int    @map(name: "block_index")
  reference  String

  note   Note?   @relation(fields: [noteId], references: [id])
  noteId String?

  recipe   Recipe? @relation(fields: [recipeId], references: [id])
  recipeId String?

  @@map(name: "instruction_lines")
}

model ParsedSegment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  index Int
  rule  String
  type  String
  value String

  ingredient   Ingredient? @relation(fields: [ingredientId], references: [id])
  ingredientId String?     @map("ingredient_id")

  ingredientLine   IngredientLine @relation(fields: [ingredientLineId], references: [id])
  ingredientLineId String         @map("ingredient_line_id")

  @@map(name: "parsed_segments")
}

model Note {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  evernoteGUID String  @map(name: "evernote_guid")
  title        String
  source       String?

  categories Category[]
  tags       Tag[]

  image    String?
  content  String? @db.Text
  isParsed Boolean @default(false) @map(name: "is_parsed")

  ingredients  IngredientLine[]
  instructions InstructionLine[]

  @@map(name: "notes")
}

model ParserRule {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name  String
  label String

  definitions ParserRuleDefinition[]

  @@map(name: "parser_rules")
}

model ParserRuleDefinition {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  example   String
  formatter String?
  order     Int
  rule      String

  parserRule   ParserRule? @relation(fields: [parserRuleId], references: [id])
  parserRuleId String?

  @@map(name: "parser_rule_definition")
}
