### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Account {
  access_token: String
  expires_at: Int
  id: String!
  id_token: String
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
  userId: String!
}

type AlternateName {
  ingredientId: String!
  name: String!
}

type CategoriesResponse {
  categories: JSON
  error: String
}

type Category {
  evernoteGUID: String
  id: String!
  name: String
}

type Container {
  count: Int
  currentIngredientId: String
  currentIngredientName: String
  id: String
  ingredients: [Ingredient]
  isExpanded: Boolean
  name: String
}

type EvernoteNotesMetaResponse {
  error: String
  notes: [NoteMeta]
}

type EvernoteNotesResponse {
  error: String
  notes: [Note]
}

type EvernoteSession {
  authURL: String
  error: String
  evernoteAuthToken: String
  evernoteReqSecret: String
  evernoteReqToken: String
  expires: String
  id: String!
  isExpired: Boolean
  loading: Boolean
  oauthVerifier: String
  userId: String
}

type ExpectedGrammarTest {
  id: String
  type: GrammarTypeEnum
  value: String!
}

type GenericResponse {
  error: String
}

type GrammarTest {
  expected: [ExpectedGrammarTest]
  id: String
  reference: String!
}

enum GrammarTypeEnum {
  AMOUNT
  COMMENTS
  DESCRIPTORS
  INGREDIENT
  OTHER
  UNIT
}

type Ingredient {
  alternateNames: [AlternateName]
  createdAt: String
  id: String!
  isComposedIngredient: Boolean
  isValidated: Boolean
  name: String
  parent: Ingredient
  plural: String
  properties: [Properties]
  references: [IngredientLine]
  relatedIngredients: [Ingredient]
  substitutes: [Ingredient]
  updatedAt: String
}

input IngredientInput {
  id: String!
  isComposedIngredient: Boolean
  isValidated: Boolean
  name: String!
  plural: String
}

type IngredientLine {
  blockIndex: Int
  createdAt: String
  id: String
  isParsed: Boolean
  lineIndex: Int
  parsed: [ParsedSegment]
  reference: String
  rule: String
  updatedAt: String
}

type InstructionLine {
  blockIndex: Int!
  createdAt: String
  id: String!
  reference: String!
  updatedAt: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  addParserRule(input: ParserRuleInput): ParserRule
  authenticateEvernote(oauthVerifier: String, userId: String): EvernoteSession
  clearEvernoteSession(userId: String): EvernoteSession
  deleteParserRule(id: ID): ParserRule
  getNotesContent: EvernoteNotesResponse
  getNotesMeta: EvernoteNotesMetaResponse
  importLocal: EvernoteNotesResponse
  resetDatabase(userId: String): EvernoteSession
  resetParserRules: GenericResponse
  saveRecipes: EvernoteNotesResponse
  seedBasicParserRules: GenericResponse
  toggleContainer(id: String): Container
  toggleContainerIngredient(currentIngredientId: String, currentIngredientName: String, id: String): Container
  updateParserRule(input: ParserRuleInput): ParserRule
  updateParserRulesOrder(input: ParserRulesOrderInput): [ParserRule]
}

type Note {
  categories: [Category]
  content: String
  createdAt: String
  evernoteGUID: String
  id: String
  image: String
  ingredients: [IngredientLine]
  instructions: [InstructionLine]
  isParsed: Boolean
  source: String
  tags: [Tag]
  title: String!
  updatedAt: String
}

type NoteMeta {
  categories: [Category]
  content: String
  createdAt: String
  evernoteGUID: String
  id: String
  image: String
  isParsed: Boolean
  source: String
  tags: [Tag]
  title: String!
  updatedAt: String
}

type ParsedSegment {
  createdAt: String
  id: String!
  index: Int
  ingredient: Ingredient
  ingredientId: String
  ingredientLineId: String
  rule: String
  type: String
  updatedAt: String
  value: String
}

type ParserRule {
  definitions: [ParserRuleDefinition]
  id: String
  label: String
  name: String
  order: Int!
}

type ParserRuleDefinition {
  example: String
  formatter: String
  id: String
  list: [String]
  order: Int!
  rule: String
  type: ParserRuleDefinitionType
}

input ParserRuleDefinitionInput {
  example: String
  formatter: String
  id: String
  list: [String]
  order: Int!
  parserRuleId: String
  rule: String!
  type: ParserRuleDefinitionType
}

enum ParserRuleDefinitionType {
  LIST
  RULE
}

input ParserRuleInput {
  definitions: [ParserRuleDefinitionInput]
  id: String
  label: String
  name: String!
  order: Int!
}

input ParserRuleOrderInput {
  id: String
  order: Int
}

type ParserRules {
  parserRules: [ParserRule]
}

input ParserRulesOrderInput {
  parserRules: [ParserRuleOrderInput]
}

enum Properties {
  DAIRY
  FISH
  GLUTEN
  MEAT
  POULTRY
  SOY
}

type Query {
  container(id: String): Container
  containers(group: String, view: String): [Container]
  evernoteSession(userId: String): EvernoteSession
  getPendingCategories: CategoriesResponse
  ingredient(id: ID): Ingredient
  ingredients: [Ingredient]
  note(id: ID): Note
  notes: [Note]!
  parserRule(id: ID): ParserRule
  parserRules: [ParserRule]
  tests: [GrammarTest]
  users: [User]!
}

enum Role {
  ADMIN
  SUPERADMIN
  USER
}

type Session {
  expires: String!
  id: String!
  sessionToken: String!
  userId: String!
}

type Tag {
  evernoteGUID: String
  id: String!
  name: String
}

type User {
  createdAt: String
  email: String
  id: String!
  name: String
  noteImportOffset: Int
  role: Role
  updatedAt: String
}